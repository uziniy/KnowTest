import random
import os

# 문제와 답을 딕셔너리 형태로 저장
questions_and_answers = {
    #2장
    "Blink 예제에서 LED 점멸 간격을 조정하는 함수는 무엇인가요?": "delay()",
    "시리얼 통신에서 사용하는 기본 통신 속도 단위는 무엇인가요?": "bps(bit per second)",
    "시리얼 통신에서 보레이트(baud rate)의 대표적인 값은 무엇인가요?": "9600bps",
    "시리얼 통신을 시작하고 통신 속도를 설정하는 함수는 무엇인가요?": "Serial.begin()",
    "시리얼 통신으로 송신된 데이터를 읽는 함수는 무엇인가요?": "Serial.read()",
    "디지털 핀의 입력 신호를 읽어오는 함수는 무엇인가요?": "digitalRead()",
    "디지털 핀의 출력 신호를 설정하는 함수는 무엇인가요?": "digitalWrite()",
    "플로팅(floating) 상태를 방지하기 위해 사용하는 저항의 종류는 무엇인가요?": "pull-up or pull-down",
    "풀업 저항이 사용된 회로에서 스위치를 누르면 입력 핀의 신호는 어떻게 되나요?": "LOW 신호가 인가됨",
    
    
    #3장
    "가변저항이 변경할 수 있는 전앞의 범위는?": "0V~5V",
    "14bit 해상도를 모두 활용하기 위해 사용하는 함수는? ": "analogReadResolution()",
    "아날로그 A0~A5핀은 아날로그 신호 입력을 위한 핀이므로 pinMode 설정을 안해도 된다.(o,x)": "o",
    "NTC의 약자는 ? ": "",
    "NTC 써미스터는 온도가 높아지면 저항이 __하는 특성이 있다.": "감소",
    "NTC 써미스터의 정격 주변온도 저항을 100K로하면 주변 온도가 25도 일때 써미스터의 저항은 몇일까?": "100K",
    
    
    #4장
    # 아날로그 출력 및 PWM 관련
    "아날로그 출력 신호를 생성하기 위해 사용하는 아두이노 함수는 무엇인가요?": "analogWrite()",
    "analogWrite 함수에 전달할 수 있는 값의 범위는 무엇인가요?": "0~255",
    "analogWrite 함수가 출력가능 한 비트는 무엇인가요?": "8bit",
    "PWM 신호 출력 핀은 아두이노 보드에서 어떤 기호로 표시되나요?": "~",
    "PWM 약자는 무엇인가요?": "Pulse Width Modulation",
    "하나의 펄스가 시작해서 끝나는 데에걸리는 시간을 의미하는 것은?": "주기",
    "PWM 신호가 HIGH로 유지되는 시간의 비율. %로 표현되며 0~100까지의 범위를 가지는 것은?": "듀티 사이클", 
    # DAC 관련
    "DAC(Digital-to-Analog Converter)는 어떤 핀에서 사용 가능한가요? ": "A0",
    "아두이노 UNO R4 WiFi와 UNO R3의 DAC 지원 차이점은 무엇인가요?": "DAC가 내장",
    
        
    #5장
    # 오디오 신호 관련
    "소리의 물리적 특성 세 가지는 무엇인가요?": "주파수 진폭 파형",
    "음의 높낮이를 결정하는 물리적 특성은 무엇인가요?": "주파수",
    "음량을 나타내는 것은?": "진폭",
    "아두이노의 PWM으로 생성 가능한 파형은 무엇인가요?": "구형파",
    "DAC를 활용하면 어떤 파형을 생성할 수 있나요?": "정현파 삼각파등 아날로그 파형",
    # 피에조 부저 관련
    "피에조 부저에서 소리를 발생시키는 원리는 무엇인가요?": "압전 효과",
    "피에조 부저의 두 가지 유형은 무엇인가요?": "능동부저 수동부저",
    "tone 함수로 31Hz 미만의 소리를 낼 수 있나요?(o, x)": "x",
    "tone 함수는 여러개 호출 가능하다 (o, x)": "x",
    "tone 함수가 여러개 호출 불가능한 이유는 무엇인가?": "타이머를 활용하기 때문에",
    "tone 함수를 활용할 때 해당 핀들의 PWM 출력이 제대로 되지 않을 수 있다 (o, x)": "o",
    
    
    #6장
    "시리얼로 일련의 비트를 입력 받고 이를 병렬 입출력 핀으로 한 꺼번에 출력하는 장치는?": "시프트 레지스터",
    "74HC595는 __입력, __출력 방식의 시프트 레지스터이다.(__채우기)": "직렬 병렬",
    "시프트 레지스터의 16개 핀 중 Q로 시작하는 것들은 모두 Output이다. (o, x)": "o",
    "시프트 레지스터 핀중 데이터 핀의 이름은?": "SER",
    "시프트 레지스터 핀중 클록핀의 이름은?": "SRCLK",
    "시프트 레지스터 핀중 래치 핀의 이름은?": "RCLK",  
    "시프트 레지스터는 비동기식으로 작동한다.(o,x)": "x",
    "시프트 레지스터에서 LOW가 가해진 경우 데이터 출력이 가능하지만 HIGH가 가해질 경우 데이터 출력이 불가능한 핀의 약어은?": "OE",
    "시프트 레지스터에서 LOw가 가해지면 저장된 값을 지우는 핀의 약어는?": "SRCLR",
    "매 클록마다 시프트되면서 버려지는 마지막 비트가 출력되는 핀의 이름은?": "QH'",    
    "두 개 이상의 74HC595를 직렬로 연결하여 사용할 때, 다음 시프트 레지스터의 데이터 핀에 연결해야 하는 핀은 무엇인가요?": "QH’",
    
    #7장
    "두 개의 신호선으로 여러장치간의 데이터를 주고받는 직렬 통신 프로토콜의 이름은?": "I2C",
    "I2C 프로토콜에서 사용되는 두 개의 주요 신호선 이름은 무엇인가요?": "SDA SCL.",
    "I2C 프로토콜에서 데이터를 송수신하는 라인은 무엇인가요?": "SDA",
    "I2C 프로토콜에서 데이터 전송 타이밍을 동기화하는 라인은 무엇인가요?": "SCL",
    "I2C 프로토콜에서 사용되는 주소의 비트 길이는 몇 비트인가요?": "7bit",
    
    "SDA 라인은 양방향 통신이 가능하다.(o,x)": "o",
    "SCL은 마스터의 클럭 신호를 전달하는 라인으로 데이터 전송의 타이밍을 동기화하는 역할을 한다.(o,x)": "o",
    "I2C 프로토콜은 반이중 통신을 한다.(o,x)": "o",
    "마스터 혹은 슬레이브로 I2C 통신을 시작하는 함수는?": "Wire.being(address)",
    "I2C에서 address로 데이터 전송을 시작하는 함수는?": "Wire.beginTransmission(address)",
    "I2C에서 value를 데이터 버퍼에 기록하는 함수는?": "Wire.write(value)",
    "I2C에서 쓰기를 마치면서 데이터 버퍼의 모든 값들을 실제로 전송하는 함수는?": "Wire.endTransmission()",
    "마스터로부터 데이터가 전송될 때 호출될 함수 func를 등록하는 함수는?": "Wire.onReceive(func)",
    "Wire.read() 함수로 읽을 수 있는 사용 가능한 바이트 수를 반환하는 함수는?": "Wire.available()",
    "전달 받은 데이터를 1btye 만큼 읽어 반환하는 함수는?": "Wire.read()",
    "I2C 풀업저항은 일반적으로 2k~10k사이면 문제가 없다. (o,x)": "o",
    "I2C 풀업저항의 크기가 커질수록 통신속도가 빨라지고 작아질수록 적은 전류를 소비할 수 있다. (o,x)": "x",
    
    
    #9장
    # Bluetooth 관련
    "Bluetooth 통신이 동작하는 주파수 대역은 무엇인가요?": "2.4 GHz",
    "Bluetooth 기술의 두 가지 주요 종류는 무엇인가요?": "Classic BLE",
    "Bluetooth Classic과 BLE의 주요 차이는 무엇인가요?": "Classic: 데이터 전송량이 많음. BLE: 저전력 소비를 위한 설계.",
    "Arduino UNO R4 WiFi의 ESP32-S3 모듈은 어떤 Bluetooth 기술을 지원하나요?": "BLE",
    "Bluetooth 통신에서 Central과 Peripheral의 역할은 무엇인가요?": "Central: 데이터 요청 및 연결 관리 Peripheral: 데이터 제공",
    
    #10장
    # DC 모터 관련
    "DC 모터에서 DC는 무엇의 약자인가요?": "Direct Current",
    "DC 모터의 회전 방향을 변경하려면 어떻게 해야 하나요?": "전원의 극성을 반대로 연결합니다.",
    "DC 모터를 전자적으로 제어하기 위해 사용하는 반도체 소자는 무엇인가요?": "트랜지스터",
    "NPN 트랜지스터와 PNP 트랜지스터의 주요 차이는 무엇인가요?": "NPN: 베이스에 양전압을 넣으면 전류가 흐릅니다. PNP: 베이스에 음전압이 걸릴 때 전류가 흐릅니다.",
    "DC 모터의 역전류를 방지하기 위해 사용하는 부품은 무엇인가요?": "다이오드",
    "H-브리지 회로의 주요 기능은 무엇인가요?": "DC 모터의 회전 방향을 전자적으로 제어합니다.",
    "L293D 모터 드라이버의 주요 기능은 무엇인가요?": "전류 및 전압 증폭, 회전 방향 제어, 속도 제어, 회로 보호.",
    "L293D에서 ENA 핀의 주요 역할은 무엇인가요?": "DC 모터를 켜고 끄거나, PWM 신호를 입력해 속도를 제어합니다.",
    
    
    #11장
    #WiFi_r2
    "WiFi란 무엇을 사용하는 기술인가요?": "무선 주파수",
    "WiFi에서 주로 사용하는 두 가지 주파수 대역은 무엇인가요?": "2.4GHz와 5GHz",
    "WiFi를 통해 장치 간 데이터를 전송하기 위해 사용하는 기기는 무엇인가요?": "무선 라우터 또는 액세스 포인트(AP)",
    "Arduino Uno R4 WiFi는 외부 모듈 없이 네트워크에 연결할 수 있는데 이를 가능하게 하는 내장 모듈의 이름은?": "ESP32S3",
    "WiFi와 BLE를 비교했을 때 WiFi의 데이터 전송 방식은 무엇인가요?": "서버-클라이언트 구조",
    "BLE는 네트워크 연결 없이 장치 간 직접 연결을 사용하는 반면, WiFi는 무엇이 필요합니까?": "SSID, 비밀번호, IP 주소",
    "WiFi와 BLE 중 전력 소비가 더 많은 것은 무엇인가요?": "WiFi",
    "WiFi 연결을 위한 네트워크 설정 시, Arduino Uno R4 WiFi가 지원하는 주파수 대역은?": "2.4GHz",
    "WiFi 네트워크에 연결된 Arduino가 특정 웹페이지에 GET 요청을 보내 정보를 가져오는 예제에서 필요한 API Key는 어떤 파일에 저장해야 하나요?": "arduino_secrets.h",
    "WiFi 네트워크에 연결된 Arduino가 웹 서버 역할을 하며 클라이언트 요청에 따라 LED를 제어하는 방식은 무엇과 유사한 원리인가요?": "IoT 기기 제어",
    
    
    #12장
    "서보 메커니즘은 무엇을 이용하여 동작을 정밀하게 제어하나요?": "피드백 제어 시스템",
    "서보 모터는 목표 위치를 제어하기 위해 어떤 신호를 사용하나요?": "PWM 신호",
    "SG90 서보 모터의 회전 각도 범위는 몇 도인가요?": "0~180도",
    "스테퍼 모터는 어떤 방식의 제어를 주로 사용하나요?": "오픈 루프 제어",
    "스테퍼 모터의 유니폴라 방식은 어떤 특징이 있나요?": "코일 구성에 common wire가 추가됨",
    "스테퍼 모터의 바이폴라 방식은 어떤 점에서 유리한가요?": "높은 토크와 고정밀 제어 가능",
}

# 터미널 화면을 깨끗하게 지우는 함수
def clear_screen():
    os.system("cls" if os.name == "nt" else "clear")

# 문제 풀기 함수
def solve_quiz():
    score = 0
    attempts = 0
    questions = list(questions_and_answers.keys())
    random.shuffle(questions)  # 문제 랜덤 정렬
    incorrect_answers = []  # 틀린 문제 저장

    for question in questions:
        clear_screen()
        print("=" * 50)
        print("🧑‍💻  Git 문제 풀기 퀴즈!  🧑‍💻")
        print("=" * 50)
        print(f"💡 현재 점수: {score} | 시도 횟수: {attempts}")
        print(f"남은 문제: {len(questions) - attempts}")
        print()

        print(f"문제: {question}")
        print("-" * 50)
        answer = input("👉 답을 입력하세요 ('그만' 입력 시 종료): ")

        if answer.strip().lower() == "그만":
            break

        attempts += 1
        if answer.strip().lower() == questions_and_answers[question].strip().lower():
            print("\n✅ 정답입니다!\n")
            score += 1
        else:
            print(f"\n❌ 오답입니다! 정답은: {questions_and_answers[question]}\n")
            incorrect_answers.append((question, questions_and_answers[question]))

        input("계속하려면 엔터를 누르세요...")

    # 퀴즈 결과 출력
    clear_screen()
    print("=" * 50)
    print("🎉 퀴즈 종료! 🎉")
    print(f"총 시도 횟수: {attempts} | 맞힌 문제: {score} | 틀린 문제: {len(incorrect_answers)}")
    print("=" * 50)

    # 틀린 문제 출력
    if incorrect_answers:
        print("\n❌ 틀린 문제와 정답")
        for idx, (q, a) in enumerate(incorrect_answers, start=1):
            print(f"{idx}. 문제: {q}")
            print(f"   정답: {a}\n")
    else:
        print("\n모든 문제를 맞췄습니다! 👍")

# 퀴즈 실행
solve_quiz()
